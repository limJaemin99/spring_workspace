#### spring mvc 프로젝트 

※ dynamic web project 가 없는 경우
	▶ Eclipse - Market Place - web Tools 2개 install

0. spring mvc 프로젝트는 웹애플리케이션 개발이므로 WAS서버를 추가해야 합니다.
	▶▶▶ 의존성 추가
		<!--spring web mvc-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-version}</version>
		</dependency>
		
		<!-- 웹 애플리케이션 : jsp 의 jstl 추가-->
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
## 1. 프로젝트 생성하기
	1) File - New - Dynamic Web Project
		ㄴ 첫번째 단계 : 프로젝트이름 작성
		ㄴ 두번째 단계 : Add Folder 버튼 클릭해서 다음 2개 폴더를 만들기 => src/main/resources 와 src/test/java
		ㄴ 세번째 단계 : web.xml 생성 체크하기
	
	2) Configure - Convert to Maven Project 
	
	3) webapp - WEBINF 폴더 아래 views 폴더 만들기
	
	4) 환경설정 html, jsp 파일의 인코딩 UTF-8 로 바꾸기
	
	
## 2. Spring Web MVC 프로젝트 구성요소
	1) web.xml
		- ContextLoaderListener 설정 : 파라미터로 root-context.xml 파일 필요 (db 연결동작 Bean 정의)
		- FrontController 동작을 위한 설정 : 파라미터로 servlet-context.xml 파일 필요 (서블릿 관련 Bean 정의)
		- 기타 : Filter
		※ xml 파일이 저장된 폴더 : src/main/webapp/WEB-INF
		
	2) jsp 파일이 있는 폴더 : src/main/webapp/WEB-INF/views 폴더 (views 는 개발자가 만들었다.)
	
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ★ 중요 ★ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
## 3. 요청 처리 컨트롤러의 핸들러 메소드 형식
	1) View name 은 요청 URL 과 동일하다.
	
	2) View 에 전달할 데이터는 Model 객체에 저장한다.
		ㄴ View 에 전달하면 Attribute
		ㄴ redirect 로 전달하면 파라미터가 된다. (RedirectAttributes 의 addAttribute() 와 동일)
		
	3) 파라미터 저장은 핸들러 메소드의 인자로 선언된 변수가 자동으로 한다.
		ㄴ @RequestParam(defaultValue = "1") 은 파라미터의 초기값을 설정하는 형식이다.
	
	4) 파라미터로 받은 값이 다시 View 로 전달할 때는 @ModelAttribute 로 설정한다. ★★★★★★★★★★
		ㄴ View 에 전달하면 Attribute
		ㄴ redirect 로 전달하면 파라미터가 된다. (RedirectAttributes 의 addAttribute() 와 동일)
		
	5) 파라미터 개수가 많을 때, 그것들을 필드로 갖는 DTO 또는 Map 타입으로 선언하여 전달받는다.
		ㄴ 파라미터의 name 속성과 일치하는 DTO 필드만 매핑이 된다. (★★★★★ DTO 에 setter 필수 ★★★★★)
		ㄴ Map 으로 파라미터를 받을 경우 @RequestParam 필수
		
	6) POST 요청을 처리한 후 다른 URL 로 Redirect 할 때는 [ return "redirect:URL 주소"; ] 형식으로 한다.
	
	7) 6번과 같이 redirect 할 때 스프링의 특징 : RedirectAttributes 를 사용해서 리다이렉트 URL 에 파라미터를 지정
	
	※ 요청을 보낸 클라이언트의 ip 주소 : ${pageContext.request.remoteAddr}
	
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
※ 보충 설명 : 주로 사용되는 방법
 	- Model 객체의 addAttribute() 메소드는
 	   ★★★ JSP 에서 request.setAttribute() 또는 session.setAttribute() 와 같은 동작을 한다.
 	   
 	- RedirectAttributes 객체의
 	   ★★★ addFlashAttribute() 는 [ 파라미터 X ] , [ 임시 데이터 값을 저장 ] 하므로 URL 에 표시하지 않는다.(1회용)
 	   
	- RedirectAttributes 객체의
		   addAttribute() 는 redirect URL 에 파라미터를 설정하는 역할을 한다.(▶ Model 객체로 대체 가능)

## 4. Session 사용 방법									▼ 's' 있음
	방법 1) Model 객체로 addAttribute() 하고, 애트리뷰트 이름을 @SessionAttributes 어노테이션으로 지정하기
			▶ 이때는 반드시 logout(세션 데이터 삭제) 을 SessionStatus 객체로만 할 수 있다.
			
	방법 2) 기존 서블릿에서와 같이 메소드 인자로 HttpSession 타입을 선언하여 session.setAttribute 로 저장하기
			▶ 이때는 반드시 logout 을 HttpSession 객체로 한다.
		▼ 's' 없음
	※ @SessionAttribute("user") BookUser user 를 메소드 인자로 선언하면 세션에 저장된 user 애트리뷰트를 가져올 수 있다.
			▶ 단, 이때는 방법1) 과 방법2) 로 저장된 것 모두 가져올 수 있다.

-------------------------------------------------------------------------------------------------
★★★ 중요 ★★★   
	① [ PRG 패턴 ] : POST - Redirect - Get
		1) 사용자가 컨트롤러에 POST 방식으로 요청한다.
		2) 요청처리 한 후에 브라우저는 다른 경로로 이동하라는 응답 (Redirect)
		3) 브라우저는 리다이렉트 URL 로 GET 요청한다.
	
		● 게시판 예제 프로젝트는
		- /community/write POST 요청 처리 후 /community/list 로 리다이렉트
		- /community/save POST 요청 처리 후 /community/read 로 리다이렉트
		- /community/delete POST 요청 처리 후 /community/list 로 리다이렉트
		- /login POST 요청 처리 후 /(루트 컨텍스트 패스) 로 리다이렉트
		- /member/join POST 요청 처리 후 /member/welcome 으로 리다이렉트
		
	② [ 스프링 MVC 사용자 요청 화면 ] : 사용자	요청 화면을 보여주기 위해 GetMapping 이 반드시 필요하다.
		1) 데이터 전달 X 화면만 보여주기
			- /community/write GET 요청 ▶ View 파일명 리턴
			- /member/join GET 요청 ▶ View 파일명 리턴
			- /login GET 요청 ▶ View 파일명 리턴
			
		2) 데이터 전달 O 화면에 출력하기
			- /community/list , read , update GET 요청 ▶ request 로 전달받은 Model 에 저장된 데이터 출력
			- / GET 요청(루트 컨텍스트)은 출력값을 세션에서 가져와서 출력
		
		3) 특별한 logout GET 요청 ▶ redirect:/
		